import "./index.css";
import React, {useState} from "react";
import cinema from "../../images/cinema.png";
import concert from "../../images/concert.jpeg";
import theatre from "../../images/theatre.jpeg";
import kids from "../../images/kids.jpeg";
import exhibitions from "../../images/exhibitions.jpeg";
import {MyCalendar} from "../Calendar";
import search from "../../images/Search.svg";
import sport from "../../images/sport.jpeg"
import standup from "../../images/standup.jpeg"
import arrowDown from "../../images/arrow-down.svg";
import arrowUp from "../../images/arrow-up.svg";

interface Tab {
    name: string;
    image: string;
    options: string[];
    dropdown?: Record<string, string[]>;
}

interface Card {
    id: string;
    title: string;
    subtitle: string;
    rating: string;
    image: string;
}

const tabs: Tab[] = [{
    name: "–ö–∏–Ω–æ",
    image: cinema,
    options: [
        "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä",
        "–ñ–∞–Ω—Ä",
        "–ü—Ä–µ–º—å–µ—Ä–∞",
        "–î–µ—Ç—è–º"
    ],
    dropdown: {
        "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä": ["–ö–∏–Ω–æ–º–∞–∫—Å", "–°–∏–Ω–µ–º–∞ 5", "–ê–ª–º–∞–∑", "–ö–æ—Ä—Å—Ç–æ–Ω", "–†–æ–¥–∏–Ω–∞"],
        "–ñ–∞–Ω—Ä": ["–ë–æ–µ–≤–∏–∫", "–î–µ—Ç–µ–∫—Ç–∏–≤", "–î—Ä–∞–º–∞", "–ö–æ–º–µ–¥–∏—è", "–ú–µ–ª–æ–¥—Ä–∞–º–∞"]
    }
},
    {name: "–ö–æ–Ω—Ü–µ—Ä—Ç—ã", image: concert, options: ["–ü–ª–æ—â–∞–¥–∫–∏", "–ñ–∞–Ω—Ä", "–°–∫–∏–¥–∫–∏", "–ü—É—à–∫–∏–Ω—Å–∫–∞—è –∫–∞—Ä—Ç–∞"], dropdown: {
            "–ñ–∞–Ω—Ä": ["–ü–æ–ø", "–†–æ–∫", "–•–∏–ø-–•–æ–ø", "–î–∂–∞–∑", "–ö–ª–∞—Å—Å–∏–∫–∞"],
            "–ü–ª–æ—â–∞–¥–∫–∏": ["–£–Ω–∏–∫—Å", "–ü–∏—Ä–∞–º–∏–¥–∞", "–¢–∞—Ç–Ω–µ—Ñ—Ç—å-–ê—Ä–µ–Ω–∞", "–ö–æ—Ä—Å—Ç–æ–Ω", "–§–∏–ª–∞—Ä–º–æ–Ω–∏—è"]
        }},
    {name: "–¢–µ–∞—Ç—Ä", image: theatre, options: ["–¢–µ–∞—Ç—Ä", "–ñ–∞–Ω—Ä", "–î–µ—Ç—è–º", "–ü—É—à–∫–∏–Ω—Å–∫–∞—è –∫–∞—Ä—Ç–∞"], dropdown:{
            "–¢–µ–∞—Ç—Ä":["MON", "–¢–µ–∞—Ç—Ä –∏–º. –ö–∞—á–∞–ª–æ–≤–∞", "–¢–µ–∞—Ç—Ä –∏–º. –ö–∞–º–∞–ª–∞", "–≠–∫–∏—è—Ç", "–¢–µ–∞—Ç—Ä –Ω–∞ –ë—É–ª–∞–∫–µ"],
            "–ñ–∞–Ω—Ä":["–ö–æ–º–µ–¥–∏—è", "–ú—é–∑–∏–∫–ª", "–ë–∞–ª–µ—Ç", "–î—Ä–∞–º–∞", "–û–ø–µ—Ä–∞"]
        }},
    {name: "–î–µ—Ç—è–º", image: kids, options: ["–í–æ–∑—Ä–∞—Å—Ç", "–í–∏–¥", "–ü—É—à–∫–∏–Ω—Å–∫–∞—è –∫–∞—Ä—Ç–∞"], dropdown:{
            "–í–æ–∑—Ä–∞—Å—Ç":["–æ—Ç 0 –¥–æ 2 –ª–µ—Ç", "–æ—Ç 3 –¥–æ 6 –ª–µ—Ç", "–æ—Ç 7 –¥–æ 10 –ª–µ—Ç", "–æ—Ç 11 –ª–µ—Ç"],
            "–í–∏–¥":["–ö–∏–Ω–æ", "–¢–µ–∞—Ç—Ä", "–ö–æ–Ω—Ü–µ—Ä—Ç", "–¶–∏—Ä–∫", "–í—ã—Å—Ç–∞–≤–∫–∞"]
        }},
    {name: "–í—ã—Å—Ç–∞–≤–∫–∏", image: exhibitions, options: ["–¢–µ–º–∞", "–î–µ—Ç—è–º"], dropdown:{
            "–¢–µ–º–∞":["–ñ–∏–≤–æ–ø–∏—Å—å", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ", "–ò—Å—Ç–æ—Ä–∏—è", "–§–æ—Ç–æ–≥—Ä–∞–∏—è", "–°–∫—É–ª—å–ø—Ç—É—Ä–∞"]
        }},
    {name: "–°–ø–æ—Ä—Ç", image: sport, options: ["–í–∏–¥", "–°—Ç–∞–¥–∏–æ–Ω"],dropdown:{
            "–í–∏–¥":["–§—É—Ç–±–æ–ª", "–•–æ–∫–∫–µ–π", "–ë–∞—Å–∫–µ—Ç–±–æ–ª", "–ë–æ–∫—Å", "–í–æ–ª–µ–π–ª–±–æ–ª"],
            "–°—Ç–∞–¥–∏–æ–Ω":["–¢–∞—Ç–Ω–µ—Ñ—Ç—å-–∞—Ä–µ–Ω–∞", "–ê–∫ –ë–∞—Ä—Å –ê—Ä–µ–Ω–∞", "–†—É–±–∏–Ω", "–¢—Ä—É–¥–æ–≤—ã–µ —Ä–µ–∑–µ—Ä–≤—ã", "–ö–ê–ò –û–ª–∏–º–ø"]
        }},
    {name: "–°—Ç–µ–Ω–¥–∞–ø", image: standup, options: []},
    {name: "–ï—â–µ", image: exhibitions, options: ["–°–∫–∏–¥–∫–∏", "–ö–≤–µ—Å—Ç—ã", "–®–æ—É","–õ–µ–∫—Ü–∏–∏", "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã"]},
];

const generateCards = (tabName: string, image: string): Card[] =>
    Array.from({length: 6}).map((_, index) => ({
        id: `${tabName}-${index}`,
        title: `${tabName} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ${index + 1}`,
        subtitle: "–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
        rating: (7 + Math.random()).toFixed(1),
        image,
    }));

export const City = () => {
    const [selectedTab, setSelectedTab] = useState<Tab>(tabs[0]);
    const [liked, setLiked] = useState<Record<string, boolean>>({});
    const [openStates, setOpenStates] = useState<Record<string, boolean>>({});
    const [selectedOptions, setSelectedOptions] = useState<Record<string, string>>({});


    const handleLike = (id: string) => {
        setLiked((prev) => ({
            ...prev,
            [id]: !prev[id],
        }));
    };

    const handleToggleMenu = (option: string) => {
        setOpenStates((prevState) => ({
            ...prevState,
            [option]: !prevState[option],
        }));
    };
    const cards = generateCards(selectedTab.name, selectedTab.image);

    return (
        <div className="container">
            <div className="top">
                <ul>
                    <li className="category-header">–≤—Å—ë</li>
                    <li className="top__down">—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ —Å–µ–π—á–∞—Å</li>
                </ul>
                <div className="top__desc__search">
                    <form className="search__form">
                        <input className="search__input" type="text" placeholder="–ø–æ–∏—Å–∫"/>
                        <img src={search} alt={"search"}/>

                    </form>
                    <button className="write-to-us-button">–°–º–æ—Ç—Ä–µ—Ç—å –í—Å—ë</button>
                </div>
            </div>
            <div className="tabs">
                {tabs.map((tab) => (
                    <button
                        key={tab.name}
                        className={`tab-button ${selectedTab.name === tab.name ? "active" : ""}`}
                        onClick={() => setSelectedTab(tab)}
                    >
                        {tab.name}
                    </button>
                ))}
            </div>
            <div className="mini_tabs">
                <ul className="mini_tabs_items">
                    {selectedTab.options.map((option) => (
                        <li key={option}>
                            <button
                                className="option-button"
                                onClick={() => handleToggleMenu(option)}
                            >
                                {selectedOptions[option] || option}
                                {selectedTab.dropdown?.[option] && (
                                    <img
                                        src={openStates[option] ? arrowUp : arrowDown}
                                        alt="toggle"
                                        className="category-icon"
                                    />
                                )}
                            </button>
                            {selectedTab.dropdown?.[option] && openStates[option] && (
                                <ul className="dropdown-menu">
                                    {selectedTab.dropdown[option].map((item) => (
                                        <li key={item}>
                                            <button
                                                className="dropdown-item-button"
                                                onClick={() => {
                                                    setSelectedOptions((prev) => ({
                                                        ...prev,
                                                        [option]: item
                                                    }));
                                                    setOpenStates((prev) => ({
                                                        ...prev,
                                                        [option]: false
                                                    }));
                                                }}
                                            >
                                                {item}
                                            </button>
                                        </li>
                                    ))}
                                </ul>
                            )}
                        </li>
                    ))}
                </ul>
            </div>
            <div className="main-section">
                <h1>{selectedTab.name} –≤ –ö–∞–∑–∞–Ω–∏</h1>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –¥—É—à–µ</p>

                <div className="cards">
                    <MyCalendar/>
                    {cards.map((card) => (
                        <div className="card" key={card.id}>
                            <div className="image-wrapper">
                                <img className="city__img" src={card.image} alt="img"/>
                                <div className="rating">{card.rating}</div>
                            </div>
                            <p>{card.title}</p>
                            <span>{card.subtitle}</span>
                            <button
                                className={`like-button ${liked[card.id] ? "liked" : ""}`}
                                onClick={() => handleLike(card.id)}
                            >
                                {liked[card.id] ? "‚ù§Ô∏è" : "ü§ç"}
                            </button>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};
